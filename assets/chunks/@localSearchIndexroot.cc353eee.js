const e='{"documentCount":12,"nextId":12,"documentIds":{"0":"/posts/cybersecurity/反序列化漏洞-ysoserial-C3P0.html#反序列化漏洞-ysoserial-c3p0","1":"/posts/cybersecurity/反序列化漏洞-ysoserial-C3P0.html#背景知识","2":"/posts/cybersecurity/反序列化漏洞-ysoserial-C3P0.html#验证过程","3":"/posts/cybersecurity/反序列化漏洞-ysoserial-C3P0.html#攻击原理","4":"/posts/cybersecurity/反序列化漏洞-ysoserial-C3P0.html#独立思考","5":"/posts/cybersecurity/反序列化漏洞-ysoserial-C3P0.html#_1、javax-naming包是做什么用的","6":"/posts/cybersecurity/反序列化漏洞-ysoserial-C3P0.html#_2-javax-naming-context和命名空间有什么区别","7":"/posts/cybersecurity/反序列化漏洞-ysoserial-C3P0.html#_3-referenceable和reference起什么作用","8":"/posts/cybersecurity/反序列化漏洞-ysoserial-C3P0.html#_4-jndi是做什么用的","9":"/posts/cybersecurity/反序列化漏洞-ysoserial-C3P0.html#_5-java-rmi是干什么用的","10":"/posts/cybersecurity/反序列化漏洞-ysoserial-C3P0.html#_6-为什么c3p0的payload构造参数使用的是base-url和classname","11":"/posts/cybersecurity/反序列化漏洞-ysoserial-C3P0.html#产生过的疑问"},"fieldIds":{"title":0,"titles":1,"text":2},"fieldLength":{"0":[3,1,1],"1":[1,3,86],"2":[1,3,79],"3":[1,3,194],"4":[1,3,1],"5":[4,4,84],"6":[5,4,45],"7":[3,4,32],"8":[3,4,21],"9":[4,4,53],"10":[4,4,27],"11":[1,3,11]},"averageFieldLength":[2.583333333333333,3.3333333333333335,52.833333333333336],"storedFields":{"0":{"title":"反序列化漏洞-ysoserial-C3P0","titles":[]},"1":{"title":"背景知识","titles":["反序列化漏洞-ysoserial-C3P0"]},"2":{"title":"验证过程","titles":["反序列化漏洞-ysoserial-C3P0"]},"3":{"title":"攻击原理","titles":["反序列化漏洞-ysoserial-C3P0"]},"4":{"title":"独立思考","titles":["反序列化漏洞-ysoserial-C3P0"]},"5":{"title":"1、javax.naming包是做什么用的？","titles":["反序列化漏洞-ysoserial-C3P0","独立思考"]},"6":{"title":"2. javax.naming.Context和命名空间有什么区别？","titles":["反序列化漏洞-ysoserial-C3P0","独立思考"]},"7":{"title":"3. Referenceable和Reference起什么作用？","titles":["反序列化漏洞-ysoserial-C3P0","独立思考"]},"8":{"title":"4. JNDI是做什么用的？","titles":["反序列化漏洞-ysoserial-C3P0","独立思考"]},"9":{"title":"5. java.rmi是干什么用的？","titles":["反序列化漏洞-ysoserial-C3P0","独立思考"]},"10":{"title":"6. 为什么C3P0的Payload构造参数使用的是base_url和classname？","titles":["反序列化漏洞-ysoserial-C3P0","独立思考"]},"11":{"title":"产生过的疑问","titles":["反序列化漏洞-ysoserial-C3P0"]}},"dirtCount":0,"index":[["产生过的疑问",{"0":{"11":1}}],["这一点可能是理解c3p0攻击原理的一个障碍",{"2":{"10":1}}],["这也是靶机在被攻击后报错的原因",{"2":{"10":1}}],["失败",{"2":{"10":1}}],["靶机试图调用恶意类的getobjectinstance",{"2":{"10":1}}],["而在构造payload过程中生成reference时reference的classname属性在攻击过程中并没有用到",{"2":{"10":1}}],["后续会用于获取恶意类",{"2":{"10":1}}],["目前这部分的原因还不清楚",{"2":{"10":1}}],["目录服务是命名服务的扩展",{"2":{"8":1}}],["才可以完成攻击",{"2":{"10":1}}],["发现如果url如果只写成http",{"2":{"10":1}}],["之后会用于构建urlclassloader",{"2":{"10":1}}],["之后在尾部拼接",{"2":{"6":1}}],["6",{"0":{"10":1}}],["首先对remotereference进行解封装",{"2":{"9":1}}],["首先如果对象是remotereference类型",{"2":{"9":1}}],["首先用于返回恶意类的监听会显示一条http请求日志",{"2":{"2":1}}],["解码从registry中获取到的对象",{"2":{"9":1}}],["根据传入的名字通过调用它内部属性registry",{"2":{"9":1}}],["根据reference获取目标对象",{"2":{"3":1}}],["的environments参数",{"2":{"9":1}}],["的rnds属性",{"2":{"5":1}}],["和一个hashtable",{"2":{"9":1}}],["端口",{"2":{"9":1}}],["访问ldap目录服务",{"2":{"8":1}}],["访问文件系统中的文件",{"2":{"8":1}}],["定位远程rmi注册的对象",{"2":{"8":1}}],["定义",{"2":{"8":1,"9":1}}],["功能",{"2":{"8":1,"9":1}}],["命名服务没有属性",{"2":{"8":1}}],["命名空间",{"2":{"6":1}}],["两者的区别是目录服务中的对象可以有属性",{"2":{"8":1}}],["4",{"0":{"8":1}}],["如bsd",{"2":{"7":1}}],["如果这个对象实现了referenceable接口",{"2":{"5":1}}],["如果对象无法序列化",{"2":{"3":1}}],["如果连接数超过当前数据库连接池中的连接数会按照配置的自增长数增加连接直到达到最大连接数",{"2":{"1":1}}],["如果没有就按照默认的readobject",{"2":{"1":1}}],["如果该类有自定义的readobjec",{"2":{"1":1}}],["工厂类的位置",{"2":{"7":1}}],["默认初始化为空",{"2":{"7":2}}],["通过构造器初始化",{"2":{"7":1}}],["通过反射获取并调用了恶意类的构造方法创建该恶意类的实例",{"2":{"3":1}}],["所指向对象的工厂类的全限定名",{"2":{"7":1}}],["所指向对象的地址",{"2":{"7":1}}],["所指向对象的类全限定名",{"2":{"7":1}}],["所以通过其中存储的reference对象可获取到序列化之前的对象",{"2":{"3":1}}],["所以会首先调用以下方法poolbackeddatasourcebase",{"2":{"3":1}}],["含义",{"2":{"7":1}}],["类型",{"2":{"7":1}}],["属性",{"2":{"7":1}}],["对象的引用",{"2":{"7":1}}],["对象映射对",{"2":{"5":2}}],["是rmi服务的入口",{"2":{"9":1}}],["是指向当前命名系统之外",{"2":{"7":1}}],["是native方法",{"2":{"6":1}}],["实现",{"2":{"9":1}}],["实现该接口的对象可以返回一个指向它本身的reference对象",{"2":{"7":1}}],["实现referenceable接口的对象可以通过getreference",{"2":{"5":1}}],["3",{"0":{"7":1}}],["39",{"2":{"1":1}}],["由c语言实现",{"2":{"6":1}}],["由于payload最外层为poolbackeddatasourcebase对象",{"2":{"3":1}}],["替换为",{"2":{"6":1}}],["绑定的目标是class",{"2":{"6":1}}],["绑定的目标是对象",{"2":{"6":1}}],["每一个被加载的类有一个",{"2":{"6":1}}],["每当有连接请求时",{"2":{"1":1}}],["那么将会调用他的getreference",{"2":{"5":1}}],["继承自java",{"2":{"5":1}}],["返回实现了name接口的对象",{"2":{"5":1}}],["用于提供恶意类的url",{"2":{"10":1}}],["用于供jvm运行时调用",{"2":{"6":1}}],["用于供框架内其他组件获取",{"2":{"6":1}}],["用于枚举javax",{"2":{"5":1}}],["用于解析用户输入的字符串名称",{"2":{"5":1}}],["用该属性创建一个urlclassloader",{"2":{"3":1}}],["以",{"2":{"5":1}}],["例如",{"2":{"5":1}}],["例如cn=steve",{"2":{"5":1}}],["调用parse函数进行解析",{"2":{"5":1}}],["调用class",{"2":{"3":1}}],["接受域名",{"2":{"9":1}}],["接收入参name",{"2":{"5":1}}],["接下来看referenceableutils",{"2":{"3":1}}],["接下来看indirectlyserialized",{"2":{"3":1}}],["构造函数registrycontext",{"2":{"9":1}}],["构造函数",{"2":{"5":2}}],["构造payload过程中首先调用了poolbackeddatasourcebase",{"2":{"3":1}}],["kille",{"2":{"5":2}}],["标识名称",{"2":{"5":1}}],["入参",{"2":{"5":2}}],["只需要将恶意类传给工厂类名属性让靶机获取工厂类并实例化即可实现攻击",{"2":{"10":1}}],["只有将名称发给ldap服务器的时候才能知道名称是否有效",{"2":{"5":1}}],["只要读取到类名就会加载这个类",{"2":{"1":1}}],["相较于nameclasspair多了boundobj参数",{"2":{"5":1}}],["相关方法如下",{"2":{"3":1}}],["枚举出context指定名称下的binding",{"2":{"5":1}}],["枚举出context中指定名称下的nameclasspair",{"2":{"5":1}}],["删除一个指定名称的名称",{"2":{"5":1}}],["新增一个名称",{"2":{"5":1}}],["代表了一个命名上下文",{"2":{"5":1}}],["该包下有几个比较显眼的接口",{"2":{"5":1}}],["该连接用于将恶意类返回给靶机",{"2":{"2":1}}],["该连接用于获取远程shell",{"2":{"2":1}}],["独立思考",{"0":{"4":1},"1":{"5":1,"6":1,"7":1,"8":1,"9":1,"10":1}}],["此时提供恶意类的监听会打印出http请求记录",{"2":{"3":1}}],["使用输入的字符串构造一个复合名称",{"2":{"5":1}}],["使用输入的字符串构造一个组合名称",{"2":{"5":1}}],["使用这个urlclassloader加载指定名字的工厂类",{"2":{"3":1}}],["使用它的开源项目有hibernate",{"2":{"1":1}}],["当用户设置了reference的classfactorylocation属性时",{"2":{"3":1}}],["并且对旧名字解除绑定",{"2":{"5":1}}],["并赋值给fclasslocation",{"2":{"3":1}}],["并赋值给fclassname",{"2":{"3":1}}],["并将此连接标记为",{"2":{"1":1}}],["攻击可用性",{"2":{"8":1,"9":1}}],["攻击完成",{"2":{"3":1}}],["攻击者的恶意类url地址classfactorylocation",{"2":{"3":1}}],["攻击者的恶意类名classname",{"2":{"3":1}}],["攻击原理",{"0":{"3":1}}],["读取reference中的classfactorylocation",{"2":{"3":1}}],["读取reference中的classfactory",{"2":{"3":1}}],["+",{"2":{"3":1}}],["dictionary",{"2":{"8":1}}],["directory包中方法返回的list对象",{"2":{"5":1}}],["domain",{"2":{"5":1}}],["dnsname",{"2":{"5":1}}],["decode",{"2":{"9":1}}],["defineclass",{"2":{"6":3}}],["defineclass1",{"2":{"6":2}}],["defaultclassloader",{"2":{"3":5}}],["default",{"2":{"3":1}}],["dev",{"2":{"2":1}}],["datasourcename",{"2":{"3":1}}],["util",{"2":{"5":1}}],["unparsed",{"2":{"5":1}}],["unbind",{"2":{"5":1}}],["unsupported",{"2":{"3":1}}],["u",{"2":{"3":2}}],["use",{"2":{"3":2}}],["url和classname",{"0":{"10":1},"2":{"11":1}}],["url域名",{"2":{"5":1}}],["urlclassloader",{"2":{"3":1,"6":1}}],["url",{"2":{"2":1,"3":7,"10":1}}],["we",{"2":{"3":4}}],["writeobject",{"2":{"3":2}}],["vcs",{"2":{"3":1}}],["vetoablechangesupport",{"2":{"3":1}}],["version",{"2":{"3":5}}],["vector",{"2":{"3":1,"7":1}}],["void",{"2":{"3":1}}],["成功转换为referenceserialized实例的对象一定实现了referenceable接口",{"2":{"3":1}}],["来获取间接实例化的对象的过程中实际调用的是referenceserialized",{"2":{"3":1}}],["因为我们构造payload过程中将恶意类名赋值给了reference的工厂类名属性",{"2":{"10":1}}],["因为在序列化时会在这两个属性不可序列化时将其转化为实现了indirectlyserialized接口的referenceserialized类的实例",{"2":{"3":1}}],["因此在调用indirectlyserialized",{"2":{"3":1}}],["因此只要readobject",{"2":{"1":1}}],["检查该object是否实现了indirectlyserialized接口",{"2":{"3":1}}],["反序列化出对象存储到object类型的对象中",{"2":{"3":1}}],["反序列化时",{"2":{"3":1}}],["反序列化漏洞",{"0":{"0":1},"1":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1}}],["findclass",{"2":{"6":2}}],["fclasslocation",{"2":{"3":3}}],["fclassname",{"2":{"3":2}}],["fclass",{"2":{"3":3}}],["for",{"2":{"3":4}}],["forname",{"2":{"1":1,"3":2}}],["factoryclasslocation",{"2":{"3":1}}],["factorylocation",{"2":{"3":2}}],["factory",{"2":{"3":2}}],["赋值给了reference的classname属性",{"2":{"3":1}}],["其过程中反弹shell到监听shell的攻击机",{"2":{"3":1}}],["其getreference",{"2":{"3":1}}],["其中将类名的",{"2":{"6":1}}],["其中包含了存储name到object的映射关系的集合以及调用和更新这些映射关系的方法",{"2":{"5":1}}],["其中声明了一个单独的objectoutputstream尝试对该对象进行序列化",{"2":{"3":1}}],["其中有个关键的点",{"2":{"3":1}}],["从registry中获取对象进行解码后返回",{"2":{"9":1}}],["从而实现对原本无法序列化的对象进行序列化操作",{"2":{"3":1}}],["从缓冲池中取出处于",{"2":{"1":1}}],["则使用c3p0中定义的indirector接口及其实现类referenceindirector将实现了referenceable接口的对象转化为实现了serializable接口和indirectlyserialized接口的referenceserialized对象",{"2":{"3":1}}],["则当前对象未实现serializable接口",{"2":{"3":1}}],["则当前对象实现了serializable接口",{"2":{"3":1}}],["也不对原有的输出流造成影响",{"2":{"3":1}}],["无需再通过实例化后的工厂类调用getobjectinstance",{"2":{"10":1}}],["无法完成序列化",{"2":{"3":1}}],["无论数据库连接池中的连接是否被使用",{"2":{"1":1}}],["无论业务代码中是否使用了这些类",{"2":{"1":1}}],["无论反序列化是否成功",{"2":{"1":1}}],["若抛出notserializableexception异常",{"2":{"3":1}}],["若不抛出notserializableexception异常",{"2":{"3":1}}],["若不可序列化则将其转化为referenceserialized",{"2":{"3":1}}],["可以根据属性搜索对象",{"2":{"8":1}}],["可以接受任意名称",{"2":{"5":1}}],["可以进行序列化",{"2":{"3":1}}],["可以在正常情况下通过使目标程序进行不安全的反序列化实现攻击利用",{"2":{"1":1}}],["先调用了c3p0自带的一个工具类serializableutils的序列化方法",{"2":{"3":1}}],["\\turlclassloader",{"2":{"6":1}}],["\\tldapname",{"2":{"5":1}}],["\\ttry",{"2":{"3":1}}],["\\t测试对象是否可序列化",{"2":{"3":1}}],["\\tpoolbackeddatasourcebase",{"2":{"3":1}}],["\\t\\turlclassloader",{"2":{"6":1}}],["\\t\\trfc2253parser",{"2":{"5":1}}],["\\t\\tserializableutils",{"2":{"3":1}}],["\\t\\t\\tsecureclassloader",{"2":{"6":1}}],["\\t\\t\\treferenceindirector",{"2":{"3":1}}],["\\t\\t\\treferenceableutils",{"2":{"1":1}}],["\\t\\t\\t\\t\\tclassloader",{"2":{"6":1}}],["\\t\\t\\t\\t\\tinvoke",{"2":{"1":1}}],["\\t\\t\\t\\tobjectfactory",{"2":{"1":1}}],["\\t\\t\\t\\tclassloader",{"2":{"6":1}}],["\\t\\t\\t\\tclass",{"2":{"1":1}}],["\\t\\tindirectlyserialized",{"2":{"1":1}}],["进行了如下操作",{"2":{"3":1}}],["它提供了存储和获取指定名字绑定的远程对象引用",{"2":{"9":1}}],["它创建了两个context",{"2":{"3":1}}],["它按照序列化的顺序依次读取内容",{"2":{"3":1}}],["它实现了referenceable接口",{"2":{"3":1}}],["它实现了数据源与jndi的绑定",{"2":{"1":1}}],["它在序列化connectionpooldatasource和extensions两个成员属性时",{"2":{"3":1}}],["序列化时",{"2":{"3":1}}],["然后调用namingmanager",{"2":{"9":1}}],["然后调用referenceableutils",{"2":{"3":1}}],["然后等待反弹shell的监听会捕获到来自靶机的webshell",{"2":{"2":1}}],["然后在该目录中启动一个http服务等待靶机连接",{"2":{"2":1}}],["运行之后",{"2":{"2":1}}],["host",{"2":{"9":1}}],["http",{"2":{"2":1}}],["hashtable",{"2":{"1":1,"3":2,"9":2}}],["拆分为两个参数",{"2":{"2":1}}],["会以最后一个",{"2":{"2":1}}],["将入参name赋值给domain",{"2":{"5":1}}],["将解析结果赋值给list",{"2":{"5":1}}],["将绑定在旧名字上的对象绑定到新名字",{"2":{"5":1}}],["将固定字符串",{"2":{"3":1}}],["将恶意类的类名赋值给了reference的classfactory属性",{"2":{"3":1}}],["将提供恶意类的url赋值给了reference的classfactorylocation属性",{"2":{"3":1}}],["将参数在输入给c3p0之后",{"2":{"2":1}}],["将该类编译后放到任意目录",{"2":{"2":1}}],["参数为http",{"2":{"2":1}}],["配置program",{"2":{"2":1}}],["配置环境",{"2":{"2":1}}],["o=isode",{"2":{"5":2}}],["objectfactory",{"2":{"3":2}}],["object",{"2":{"3":4,"5":1,"9":2}}],["objects",{"2":{"3":2}}],["objectinputstream",{"2":{"3":1}}],["o",{"2":{"3":12}}],["ois",{"2":{"3":8}}],["out",{"2":{"2":1,"3":2}}],["off",{"2":{"6":3}}],["of",{"2":{"1":1,"3":4}}],["true",{"2":{"3":1}}],["try",{"2":{"2":1,"3":3}}],["thread",{"2":{"3":1}}],["throw",{"2":{"3":1}}],["throws",{"2":{"3":4,"7":1}}],["the",{"2":{"3":2}}],["that",{"2":{"3":2}}],["this",{"2":{"3":20}}],["tobytearray",{"2":{"3":1}}],["tcp",{"2":{"2":1}}],["address",{"2":{"7":1}}],["addrs",{"2":{"3":1,"7":1}}],["all",{"2":{"3":2}}],["artificial",{"2":{"3":2}}],["an",{"2":{"3":2}}],["amp",{"2":{"2":2}}],["attacker",{"2":{"1":1}}],["identitytoken",{"2":{"3":1}}],["if",{"2":{"3":6}}],["ioexception",{"2":{"3":3}}],["interface是java命名和目录服务接口",{"2":{"8":1}}],["int",{"2":{"6":6,"9":1}}],["initialcontext",{"2":{"3":6}}],["initialize",{"2":{"1":1}}],["instanceof",{"2":{"3":2}}],["indirectlyserialized",{"2":{"3":4}}],["indirectly",{"2":{"3":2}}],["indirectform",{"2":{"3":1}}],["ip",{"2":{"2":3,"10":2}}],["i",{"2":{"2":1}}],["base",{"2":{"10":1}}],["bash",{"2":{"2":2}}],["b",{"2":{"6":3}}],["byte",{"2":{"6":3}}],["break",{"2":{"3":1}}],["binding继承自nameclasspiar",{"2":{"5":1}}],["bind",{"2":{"5":1}}],["bin",{"2":{"2":1}}],["boolean",{"2":{"1":1}}],["quot",{"2":{"2":6,"3":6}}],["==",{"2":{"3":3}}],["=",{"2":{"2":2,"3":37}}],["rmi两个包均存储在rt",{"2":{"9":1}}],["rmi",{"2":{"9":3}}],["rmi是干什么用的",{"0":{"9":1},"2":{"11":1}}],["rdn",{"2":{"5":1}}],["r",{"2":{"2":2,"9":1}}],["runtime",{"2":{"2":2}}],["remote",{"2":{"9":1}}],["registry和java",{"2":{"9":1}}],["registry是一个指向简单远程对象注册的远程接口",{"2":{"9":1}}],["registrycontext实现了javax",{"2":{"9":1}}],["registry",{"2":{"9":2}}],["res",{"2":{"6":1}}],["resource",{"2":{"6":1}}],["rename",{"2":{"5":1}}],["readint",{"2":{"3":1}}],["readshort",{"2":{"3":1}}],["readobject",{"2":{"1":1,"3":7}}],["return",{"2":{"3":3}}],["referencable和reference起什么作用",{"2":{"11":1}}],["reference类记录了它指向对象的地址信息",{"2":{"7":1}}],["reference是一种记录那些没有直接绑定到命名系统中的对象的相关地址信息的一种方式",{"2":{"5":1}}],["referenceable接口中仅有一个方法reference",{"2":{"7":1}}],["referenceable和reference起什么作用",{"0":{"7":1}}],["referenceable",{"2":{"5":1}}],["referenceableutils",{"2":{"3":2}}],["reference",{"2":{"1":1,"3":10}}],["referencetoobject",{"2":{"1":1,"3":4}}],["referenceserialized",{"2":{"1":1,"3":1}}],["refinfo",{"2":{"9":1}}],["refaddr的子类例如stringrefaddr其中包含了contents属性用于保存具体的地址信息",{"2":{"7":1}}],["refaddr抽象类仅包含了addrtype属性用于指定当前refaddr的地址类型",{"2":{"7":1}}],["refaddr",{"2":{"7":1}}],["ref",{"2":{"1":1,"3":4}}],["payload构造参数中的classname并不是reference类中的classname属性",{"2":{"10":1}}],["parsedn",{"2":{"5":1}}],["parse",{"2":{"5":1}}],["pd",{"2":{"6":1}}],["pcs",{"2":{"3":1}}],["poolsource",{"2":{"3":1}}],["poolbackeddatasourcebase",{"2":{"1":1}}],["port是无法获取到类的",{"2":{"10":1}}],["port为用于返回恶意类的地址",{"2":{"2":1}}],["port",{"2":{"2":2,"9":1,"10":1}}],["python",{"2":{"2":1}}],["printer",{"2":{"7":1}}],["println",{"2":{"2":1}}],["protectiondomain",{"2":{"6":3}}],["propertychangesupport",{"2":{"3":1}}],["process",{"2":{"2":1}}],["p",{"2":{"2":1}}],["public",{"2":{"2":1,"3":4}}],["enumeration",{"2":{"5":1}}],["environment",{"2":{"9":1}}],["env",{"2":{"1":1,"3":8,"9":1}}],["else",{"2":{"3":2}}],["e",{"2":{"2":2}}],["extensions",{"2":{"3":1}}],["exception",{"2":{"2":1}}],["exec",{"2":{"2":1}}],["exploit",{"2":{"2":2,"3":2}}],["准备被靶机通过reference获取的恶意类",{"2":{"2":1}}],["1",{"0":{"5":1},"2":{"2":1}}],["128",{"2":{"2":1}}],["12345",{"2":{"2":2}}],["168",{"2":{"2":1}}],["192",{"2":{"2":1}}],["11",{"2":{"2":1}}],["len",{"2":{"6":3}}],["leave",{"2":{"3":2}}],["labels",{"2":{"5":1}}],["limited",{"2":{"5":2}}],["listbindings",{"2":{"5":1}}],["list",{"2":{"5":1}}],["ldapname",{"2":{"5":1}}],["lots",{"2":{"3":2}}],["lookup",{"2":{"3":1,"5":1,"9":2}}],["loader",{"2":{"1":1}}],["lt",{"2":{"3":1,"5":2,"7":1,"9":3}}],["l",{"2":{"2":1}}],["等待反弹shell连接",{"2":{"2":1}}],["等待下次使用",{"2":{"1":1}}],["在攻击过程中会被赋值给reference的工厂类名classfactory属性",{"2":{"10":1}}],["在最后加上一个目录分隔符http",{"2":{"10":1}}],["在实践中",{"2":{"10":1}}],["在目录服务中",{"2":{"8":1}}],["在绑定一个对象时",{"2":{"5":1}}],["在反序列化connectionpooldatasource和extensions两个参数时进行了如下操作",{"2":{"3":1}}],["在idea中运行c3p0",{"2":{"2":1}}],["在12345端口打开监听",{"2":{"2":1}}],["在缓冲池中创建指定数量的数据库连接",{"2":{"1":1}}],["非必须",{"2":{"2":1}}],["8",{"2":{"2":1}}],["jar中",{"2":{"8":1,"9":1}}],["java运行时均可反序列化出该包下的对象",{"2":{"9":1}}],["java运行时中均可以反序列化出该包下的对象",{"2":{"8":1}}],["javax",{"0":{"5":1,"6":1},"2":{"5":1,"6":2,"11":2}}],["javaprivate",{"2":{"3":1}}],["javapublic",{"2":{"2":1,"3":3}}],["java反序列化时会调用objectinputstream的readobject",{"2":{"1":1}}],["java原生序列化和反序列化将属性的类名同时写入到了序列化流中",{"2":{"1":1}}],["java序列化",{"2":{"1":1}}],["java",{"0":{"9":1},"2":{"1":1,"2":2,"3":1,"5":1,"6":1,"8":1,"9":1,"11":1}}],["jndi",{"2":{"9":2}}],["jndi包存储在rt",{"2":{"8":1}}],["jndi的com",{"2":{"8":1}}],["jndi是做什么用的",{"0":{"8":1},"2":{"11":1}}],["jvm为每一个classloader维护一个命名空间且不支持将一个class重复加载到同一个命名空间",{"2":{"6":1}}],["jdk1",{"2":{"2":1}}],["2",{"0":{"6":1},"2":{"2":2}}],["59",{"2":{"2":1}}],["5",{"0":{"9":1},"2":{"2":1}}],["9999",{"2":{"2":1}}],["9",{"2":{"2":1}}],["0",{"2":{"2":3}}],["map",{"2":{"3":1}}],["malicious",{"2":{"1":2}}],["m",{"2":{"2":1}}],["mchange",{"2":{"2":3}}],["验证过程",{"0":{"2":1}}],["都会保持最小连接数以应对流量的变化",{"2":{"1":1}}],["都会执行readobject",{"2":{"1":1}}],["直到该连接请求处理完成后将该连接标记为",{"2":{"1":1}}],["状态",{"2":{"1":1}}],["状态的连接",{"2":{"1":1}}],["忙碌",{"2":{"1":1}}],["空闲状态",{"2":{"1":1}}],["空闲",{"2":{"1":1}}],["为什么c3p0的payload构造参数使用的是base",{"0":{"10":1},"2":{"11":1}}],["为分隔拆分name存入arraylist",{"2":{"5":1}}],["为数据库建立一个缓冲池",{"2":{"1":1}}],["为解决传统开发模式中",{"2":{"1":1}}],["采用数据库连接池技术来进行缓解",{"2":{"1":1}}],["带来的时间开销",{"2":{"1":1}}],["执行完成后再断开连接",{"2":{"1":1}}],["执行sql语句",{"2":{"1":1}}],["一旦需要数据库连接就必须向数据库重新认证申请连接",{"2":{"1":1}}],["释放资源",{"2":{"1":1}}],["处理查询结果集resultset",{"2":{"1":1}}],["获取对象实例",{"2":{"9":1}}],["获取一个命名对象",{"2":{"5":1}}],["获取数据库处理对象statement",{"2":{"1":1}}],["获取连接connection",{"2":{"1":1}}],["注册驱动",{"2":{"1":1}}],["传统jdbc开发模式",{"2":{"1":1}}],["支持jdbc3规范和jdbc2的标准扩展",{"2":{"1":1}}],["过程从而执行恶意代码",{"2":{"1":1}}],["存在调用点",{"2":{"1":1}}],["流程执行",{"2":{"1":1}}],["方法根据reference对象中的classname再去创建一次对象",{"2":{"10":1}}],["方法获取它的reference对象用来绑定",{"2":{"5":1}}],["方法返回一个指向自己的reference对象",{"2":{"5":1}}],["方法",{"2":{"1":1}}],["方法来进行反序列化",{"2":{"1":1}}],["就执行自定义的readobject",{"2":{"1":1}}],["sun",{"2":{"8":1,"9":2}}],["static",{"2":{"3":1}}],["string",{"2":{"1":1,"2":1,"3":11,"5":8,"6":5,"7":3,"9":2}}],["serialized",{"2":{"3":3}}],["source",{"2":{"6":1}}],["so",{"2":{"3":2}}],["scope",{"2":{"3":2}}],["switch",{"2":{"3":1}}],["short",{"2":{"3":1}}],["shellnc",{"2":{"2":1}}],["simplehttpserver",{"2":{"2":1}}],["system",{"2":{"2":1}}],["spring",{"2":{"1":1}}],["s",{"2":{"1":1}}],["null",{"2":{"3":5}}],["numhelperthreads",{"2":{"3":1}}],["naming",{"0":{"6":1},"2":{"5":1,"6":2,"8":1,"9":1,"11":1}}],["namingenumeration",{"2":{"5":1}}],["namingexception",{"2":{"3":2,"7":1}}],["naming包和javax",{"2":{"5":1}}],["naming包为访问命名服务提供类和接口",{"2":{"5":1}}],["naming包是做什么用的",{"0":{"5":1},"2":{"11":1}}],["nameparser",{"2":{"5":1}}],["nameclasspair实现了serializable接口",{"2":{"5":1}}],["namecontext",{"2":{"3":3}}],["namectx",{"2":{"1":1,"3":2,"9":1}}],["name",{"2":{"1":3,"3":11,"5":10,"6":6,"9":6}}],["new",{"2":{"2":1,"3":10}}],["newinstance",{"2":{"1":1,"3":2}}],["cs",{"2":{"6":1}}],["cn=steve",{"2":{"5":1}}],["c=gb",{"2":{"5":2}}],["cl",{"2":{"3":4}}],["classnotfoundexception",{"2":{"3":2}}],["classname为返回的恶意类的类名",{"2":{"2":1}}],["classname",{"2":{"2":3,"3":9,"7":1,"10":1}}],["classfactorylocation",{"2":{"3":1,"7":1}}],["classfactory",{"2":{"3":1,"7":1}}],["class",{"2":{"1":1,"2":1,"3":3,"6":2}}],["classloader",{"2":{"1":1,"3":2,"6":1}}],["currentthread",{"2":{"3":1}}],["create",{"2":{"3":2}}],["can",{"2":{"3":2}}],["case",{"2":{"3":1}}],["catch",{"2":{"2":1,"3":2}}],["c",{"2":{"2":1}}],["codesource",{"2":{"6":1}}],["codes",{"2":{"3":2}}],["compoundname",{"2":{"5":1}}],["compostitename",{"2":{"5":1}}],["commons",{"2":{"2":1}}],["com",{"2":{"2":2,"9":2}}],["connectionpooldatasource",{"2":{"3":2}}],["constructor",{"2":{"1":1}}],["context接口",{"2":{"9":1}}],["context接口的实现类的每个对象都维护了一个自己的命名上下文",{"2":{"6":1}}],["context和命名空间有什么区别",{"0":{"6":1},"2":{"11":1}}],["contextname",{"2":{"3":5}}],["context",{"2":{"1":1,"3":4,"5":1,"6":1,"9":1}}],["c3p0的payload中构造的connectionpooldatasource是不可序列化的",{"2":{"3":1}}],["c3p0是一个开源的jdbc连接池",{"2":{"1":1}}],["c3p0",{"0":{"0":1},"1":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1},"2":{"1":1,"2":1,"10":1}}],["gt",{"2":{"2":2,"3":1,"5":2,"7":1,"9":3}}],["getname",{"2":{"6":1}}],["getclassloader",{"2":{"3":1}}],["getcontextclassloader",{"2":{"3":1}}],["getfactoryclasslocation",{"2":{"3":1}}],["getfactoryclassname",{"2":{"3":1}}],["getreference",{"2":{"3":1,"7":1}}],["getruntime",{"2":{"2":1}}],["getobjectinstance",{"2":{"3":1,"9":1}}],["getobject",{"2":{"1":1,"3":6}}],["gadgets",{"2":{"1":1}}],["背景知识",{"0":{"1":1}}],["ysoserial包含了许多针对通用java依赖包的小工具链",{"2":{"1":1}}],["ysoserial",{"0":{"0":1},"1":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1}}]],"serializationVersion":2}';export{e as default};
